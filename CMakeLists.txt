cmake_minimum_required(VERSION 3.5)

project(maskromtool VERSION 0.1 LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets LinguistTools Charts)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets LinguistTools Charts)


set(TS_FILES maskromtool_en_001.ts)

# The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
# generated by CMake. This variable contains the .icns file name,
# without the path.
set(MACOSX_BUNDLE_ICON_FILE icons.icns)
# And the following tells CMake where to find and install the file itself.
set(app_icon_macos "${CMAKE_CURRENT_SOURCE_DIR}/icons.icns")
set_source_files_properties(${app_icon_macos} PROPERTIES
       MACOSX_PACKAGE_LOCATION "Resources")

## And the same for Windows
set(app_icon_resource_windows "${CMAKE_CURRENT_SOURCE_DIR}/maskromtool.rc")



set(PROJECT_SOURCES
        main.cpp
        maskromtool.cpp maskromtool.h maskromtool.ui
        romview.h romview.cpp
        romscene.h romscene.cpp
        romlineitem.h romlineitem.cpp
        rombititem.h rombititem.cpp
        rombitfix.h rombitfix.cpp
        romthresholddialog.h romthresholddialog.cpp romthresholddialog.ui
        aboutdialog.h aboutdialog.cpp aboutdialog.ui
        romdecoder.h romdecoderascii.h romdecoderascii.cpp
        romdecoderjson.h romdecoderjson.cpp
        romdecodermarc4.h romdecodermarc4.cpp
        romdecoderphotograph.h romdecoderphotograph.cpp
        asciidialog.h asciidialog.cpp asciidialog.ui
        romaligner.h romaligner.cpp
        romrule.h romrule.cpp
        romrulecount.h romrulecount.cpp
        romruleduplicate.h romruleduplicate.cpp
        romrulesanity.h romrulesanity.cpp
        romdecoderpython.h romdecoderpython.cpp
        romruleambiguous.h romruleambiguous.cpp
        romruledialog.h romruledialog.cpp romruledialog.ui
        ${TS_FILES}
        ${app_icon_macos}
        ${app_icon_resource_windows}
)



if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(maskromtool
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES}
    )
# Define target properties for Android with Qt 6 as:
#    set_property(TARGET maskromtool APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation

    qt_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES})
else()
    if(ANDROID)
        add_library(maskromtool SHARED
            ${PROJECT_SOURCES}
        )
# Define properties for Android with Qt 5 after find_package() calls as:
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        add_executable(maskromtool
            ${PROJECT_SOURCES}
        )
    endif()

    qt5_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES})
endif()

target_link_libraries(maskromtool PRIVATE Qt${QT_VERSION_MAJOR}::Widgets Qt${QT_VERSION_MAJOR}::Charts)


set_target_properties(maskromtool PROPERTIES
    MACOSX_BUNDLE_GUI_IDENTIFIER maskromtool.com
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(maskromtool)
endif()
